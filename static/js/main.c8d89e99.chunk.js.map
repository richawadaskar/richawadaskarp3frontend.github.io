{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","loginSuccessful","setState","showLogin","showChatRoom","console","log","state","this","className","hidden","React","Component","ChatRoomTitle","Compose","type","id","name","value","LoginPage","validateLogin","document","getElementById","innerHtml","xhr","XMLHttpRequest","open","setRequestHeader","onload","response","send","for","onClick","MessageList","UserList","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,4ICKrCC,G,8BACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,gBAAkB,WAChB,EAAKC,SAAS,CAACC,WAAW,EAAOC,cAAc,IAC/CC,QAAQC,IAAI,6EALZ,EAAKC,MAAQ,CAACJ,WAAW,EAAMC,cAAc,GAF5B,E,sEAajB,OAFAC,QAAQC,IAAI,yBACZD,QAAQC,IAAI,kCAAoCE,KAAKD,MAAMJ,WAEzD,yBAAKM,UAAU,OACb,kBAAC,EAAD,MACCD,KAAKD,MAAMJ,UAAY,kBAAC,EAAD,CAAWF,gBAAiBO,KAAKP,kBAAqB,KAC9E,yBAAKQ,UAAU,WAAWC,QAASF,KAAKD,MAAMH,cAC5C,yBAAKK,UAAU,gBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,Y,GAvBQE,IAAMC,YA+BlBC,E,YACJ,aAAe,uE,sEAKb,OACE,gCACE,8C,GARoBF,IAAMC,WAc5BE,E,YACJ,aAAe,uE,sEAMb,OACE,yBAAKL,UAAU,WACb,2BAAOM,KAAK,OAAOC,GAAG,kBAAkBC,KAAK,gBAC7C,2BAAOF,KAAK,SAASG,MAAM,sB,GAVbP,IAAMC,WAgBtBO,E,YACJ,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KAMRoB,cAAgB,WAEdf,QAAQC,IAAI,gCAEZ,EAAKN,MAAMC,kBACMoB,SAASC,eAAe,UAAUC,UAClCF,SAASC,eAAe,UAAUC,UADnD,IAIMC,EAAM,IAAIC,eAEhBD,EAAIE,KAAK,OADG,+BAEZF,EAAIG,iBAAiB,eAAgB,qCAErCH,EAAII,OAAS,SAAUC,GACrBxB,QAAQC,IAAI,oCACZD,QAAQC,IAAIuB,IAGdL,EAAIM,KADQ,+CAvBZzB,QAAQC,IAAIN,GACZ,EAAKA,MAAQA,EACbK,QAAQC,IAAI,EAAKN,OAJA,E,sEA0CjB,OAViB,yBAAKS,UAAU,SAC9B,8BACE,2BAAOsB,IAAI,YAAX,aACA,2BAAOf,GAAG,SAASD,KAAK,OAAOE,KAAK,aAAY,6BAChD,2BAAOc,IAAI,YAAX,aACA,2BAAOf,GAAG,SAASD,KAAK,WAAWE,KAAK,aAAY,6BACpD,4BAAQF,KAAK,SAASiB,QAASxB,KAAKY,eAApC,e,GAvCgBT,IAAMC,WA+CxBqB,E,YACJ,aAAe,uE,sEAKb,OACE,yBAAKxB,UAAU,eACb,wBAAIA,UAAU,gBAAd,YACA,yBAAKA,UAAU,YACb,wCACA,wCACA,wCACA,wCACA,wCACA,8C,GAfgBE,IAAMC,WAsB1BsB,E,YACJ,aAAc,OAAC,oBAAD,4C,sEAOZ,OACE,yBAAKzB,UAAU,YACb,wBAAIA,UAAU,gBAAd,UACA,yBAAKA,UAAU,eACb,sCADF,IAEE,sCAFF,IAGE,sCAHF,U,GAXeE,IAAMC,WA8Bdb,QCzJKoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpB,SAASC,eAAe,SD2H3C,kBAAmBoB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c8d89e99.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {showLogin: true, showChatRoom: false}\n  }\n\n  loginSuccessful = () => {\n    this.setState({showLogin: false, showChatRoom: true})\n    console.log(\"Yay it was successfully able to call the parent function loginSuccessful\")\n  }\n\n  render() {\n    console.log(\"rendering application\")\n    console.log(\"current value of showLogin is: \" + this.state.showLogin)\n    return (\n      <div className=\"App\">\n        <ChatRoomTitle/>\n        {this.state.showLogin ? <LoginPage loginSuccessful={this.loginSuccessful}/> : null}\n        <div className=\"ChatRoom\" hidden={!this.state.showChatRoom}>\n          <div className=\"ChatRoomBody\">\n            <UserList/>\n            <MessageList/>\n          </div>\n          <Compose/>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nclass ChatRoomTitle extends React.Component {\n  constructor() {\n    super()\n  }\n\n  render() {\n    return (\n      <header>\n        <h1>Chat Room</h1>\n      </header>\n    )\n  }\n}\n\nclass Compose extends React.Component {\n  constructor() {\n    super()\n  }\n\n  render() {\n    // this should be the box at the bottom that allows users to post messages\n    return (\n      <div className=\"compose\">\n        <input type=\"text\" id=\"composeInputBox\" name=\"userMessage\"/>\n        <input type=\"submit\" value=\"Send Message\"/>\n      </div>\n    )\n  }\n}\n\nclass LoginPage extends React.Component {\n  constructor(props) {\n    super(props)\n    console.log(props)\n    this.props = props\n    console.log(this.props)\n  }\n\n  validateLogin = () => {\n\n    console.log(\"validating login information\")\n\n    this.props.loginSuccessful()\n    const username = document.getElementById(\"userrr\").innerHtml\n    const password = document.getElementById(\"passss\").innerHtml\n\n    // hit the server endpoint here.\n    const xhr = new XMLHttpRequest()\n    const url = \"http://localhost:4567/login\"\n    xhr.open('POST', url)\n    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\n    // xhr.onreadystatechange = printOutput;\n    xhr.onload = function (response) {\n      console.log(\"response received from serverr: \")\n      console.log(response)\n    }\n    const msg = \"username=${username}, password=${password}\"\n    xhr.send(msg)\n    // xhr.send({\"username\": username, \"password\": password})\n    // if all goes well.... else, show invalid login?\n  }\n\n  render() {\n    const element = (<div className=\"login\">\n      <form>\n        <label for=\"username\">Username:</label>\n        <input id=\"userrr\" type=\"text\" name=\"username\"/><br></br>\n        <label for=\"password\">Password:</label>\n        <input id=\"passss\" type=\"password\" name=\"password\"/><br></br>\n        <button type=\"button\" onClick={this.validateLogin}>Login</button>\n      </form>\n    </div>)\n\n    return element\n  }\n}\n\nclass MessageList extends React.Component {\n  constructor() {\n    super()\n  }\n\n  render() {\n    return (\n      <div className=\"messageList\">\n        <h3 className=\"sectionTitle\">Messages</h3>\n        <div className=\"messages\">\n          <p>Message 1</p>\n          <p>Message 2</p>\n          <p>Message 3</p>\n          <p>Message 4</p>\n          <p>Message 5</p>\n          <p>Message 6</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass UserList extends React.Component {\n  constructor() {\n      // initialize the users list and set up the global variable???\n      super()\n  }\n\n  render() {\n    // iteratively create the way you're going to display the user list in the chat app.\n    return (\n      <div className=\"userList\">\n        <h3 className=\"sectionTitle\">Online</h3>\n        <div className=\"usersOnline\">\n          <p>cindylu</p>;\n          <p>cindylu</p>;\n          <p>cindylu</p>;\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction date_format(timestamp) {\n    var date = new Date(timestamp * 1000);\n    return (\n        date.toLocaleDateString(\"en-US\") +\n        \" \" +\n        date.toLocaleTimeString(\"en-US\")\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}